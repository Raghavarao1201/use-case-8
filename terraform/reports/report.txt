#Deployment Report
This file was generated during the github actions workflow run.

## Terraform Plan Output
[command]/home/runner/work/_temp/12aaeaf1-b18a-40cb-a82e-62c4e07394c4/terraform-bin plan -no-color -lock=false
data.archive_file.lambda_zip: Reading...
random_id.suffix: Refreshing state... [id=X6h7MxB4kek]
data.archive_file.lambda_zip: Read complete after 0s [id=8749e4211ca99cade9b076b813b5cf495bc60174]
data.aws_caller_identity.current: Reading...
data.aws_region.current: Reading...
aws_iam_role.lambda_execution_role: Refreshing state... [id=lambda-image-processor-role-5fa87b33107891e9]
data.aws_region.current: Read complete after 0s [id=us-east-1]
aws_s3_bucket.processed_bucket: Refreshing state... [id=processed-image-destination-bucket-5fa87b33107891e9]
aws_s3_bucket.source_bucket: Refreshing state... [id=image-upload-source-bucket-5fa87b33107891e9]
data.aws_caller_identity.current: Read complete after 0s [id=154767946691]
aws_s3_bucket_server_side_encryption_configuration.processed_sse: Refreshing state... [id=processed-image-destination-bucket-5fa87b33107891e9]
aws_s3_bucket_server_side_encryption_configuration.source_sse: Refreshing state... [id=image-upload-source-bucket-5fa87b33107891e9]
aws_s3_bucket_policy.source_bucket_policy: Refreshing state... [id=image-upload-source-bucket-5fa87b33107891e9]
aws_iam_policy.lambda_execution_policy: Refreshing state... [id=arn:aws:iam::154767946691:policy/lambda-image-processor-policy-5fa87b33107891e9]
aws_iam_role_policy_attachment.lambda_execution_policy_attachment: Refreshing state... [id=lambda-image-processor-role-5fa87b33107891e9-20250423080403501200000001]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_lambda_function.image_processor_lambda will be created
  + resource "aws_lambda_function" "image_processor_lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "./lambda_image_processor/lambda.zip"
      + function_name                  = "image-processor-lambda-5fa87b33107891e9"
      + handler                        = "lambda_function.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 256
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::154767946691:role/lambda-image-processor-role-5fa87b33107891e9"
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "7uogEv/XjfY6pqRqOBRrdTMx8Ov7aLVWG9SITKfUvoQ="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Environment" = "dev"
          + "Name"        = "Image Processor Lambda"
        }
      + tags_all                       = {
          + "Environment" = "dev"
          + "Name"        = "Image Processor Lambda"
        }
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "PROCESSED_BUCKET_NAME" = "processed-image-destination-bucket-5fa87b33107891e9"
            }
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config {
          + mode = "Active"
        }
    }

  # aws_lambda_permission.allow_s3 will be created
  + resource "aws_lambda_permission" "allow_s3" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "image-processor-lambda-5fa87b33107891e9"
      + id                  = (known after apply)
      + principal           = "s3.amazonaws.com"
      + source_account      = "154767946691"
      + source_arn          = "arn:aws:s3:::image-upload-source-bucket-5fa87b33107891e9"
      + statement_id        = "AllowS3Invocation"
      + statement_id_prefix = (known after apply)
    }

  # aws_s3_bucket_notification.image_upload_trigger will be created
  + resource "aws_s3_bucket_notification" "image_upload_trigger" {
      + bucket      = "image-upload-source-bucket-5fa87b33107891e9"
      + eventbridge = false
      + id          = (known after apply)

      + lambda_function {
          + events              = [
              + "s3:ObjectCreated:*",
            ]
          + filter_prefix       = "uploads/"
          + id                  = (known after apply)
          + lambda_function_arn = (known after apply)
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
::debug::Terraform exited with code 0.
::debug::stdout: data.archive_file.lambda_zip: Reading...%0Arandom_id.suffix: Refreshing state... [id=X6h7MxB4kek]%0Adata.archive_file.lambda_zip: Read complete after 0s [id=8749e4211ca99cade9b076b813b5cf495bc60174]%0Adata.aws_caller_identity.current: Reading...%0Adata.aws_region.current: Reading...%0Aaws_iam_role.lambda_execution_role: Refreshing state... [id=lambda-image-processor-role-5fa87b33107891e9]%0Adata.aws_region.current: Read complete after 0s [id=us-east-1]%0Aaws_s3_bucket.processed_bucket: Refreshing state... [id=processed-image-destination-bucket-5fa87b33107891e9]%0Aaws_s3_bucket.source_bucket: Refreshing state... [id=image-upload-source-bucket-5fa87b33107891e9]%0Adata.aws_caller_identity.current: Read complete after 0s [id=154767946691]%0Aaws_s3_bucket_server_side_encryption_configuration.processed_sse: Refreshing state... [id=processed-image-destination-bucket-5fa87b33107891e9]%0Aaws_s3_bucket_server_side_encryption_configuration.source_sse: Refreshing state... [id=image-upload-source-bucket-5fa87b33107891e9]%0Aaws_s3_bucket_policy.source_bucket_policy: Refreshing state... [id=image-upload-source-bucket-5fa87b33107891e9]%0Aaws_iam_policy.lambda_execution_policy: Refreshing state... [id=arn:aws:iam::154767946691:policy/lambda-image-processor-policy-5fa87b33107891e9]%0Aaws_iam_role_policy_attachment.lambda_execution_policy_attachment: Refreshing state... [id=lambda-image-processor-role-5fa87b33107891e9-20250423080403501200000001]%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A  + create%0A%0ATerraform will perform the following actions:%0A%0A  # aws_lambda_function.image_processor_lambda will be created%0A  + resource "aws_lambda_function" "image_processor_lambda" {%0A      + architectures                  = (known after apply)%0A      + arn                            = (known after apply)%0A      + code_sha256                    = (known after apply)%0A      + filename                       = "./lambda_image_processor/lambda.zip"%0A      + function_name                  = "image-processor-lambda-5fa87b33107891e9"%0A      + handler                        = "lambda_function.lambda_handler"%0A      + id                             = (known after apply)%0A      + invoke_arn                     = (known after apply)%0A      + last_modified                  = (known after apply)%0A      + memory_size                    = 256%0A      + package_type                   = "Zip"%0A      + publish                        = false%0A      + qualified_arn                  = (known after apply)%0A      + qualified_invoke_arn           = (known after apply)%0A      + reserved_concurrent_executions = -1%0A      + role                           = "arn:aws:iam::154767946691:role/lambda-image-processor-role-5fa87b33107891e9"%0A      + runtime                        = "python3.9"%0A      + signing_job_arn                = (known after apply)%0A      + signing_profile_version_arn    = (known after apply)%0A      + skip_destroy                   = false%0A      + source_code_hash               = "7uogEv/XjfY6pqRqOBRrdTMx8Ov7aLVWG9SITKfUvoQ="%0A      + source_code_size               = (known after apply)%0A      + tags                           = {%0A          + "Environment" = "dev"%0A          + "Name"        = "Image Processor Lambda"%0A        }%0A      + tags_all                       = {%0A          + "Environment" = "dev"%0A          + "Name"        = "Image Processor Lambda"%0A        }%0A      + timeout                        = 30%0A      + version                        = (known after apply)%0A%0A      + environment {%0A          + variables = {%0A              + "PROCESSED_BUCKET_NAME" = "processed-image-destination-bucket-5fa87b33107891e9"%0A            }%0A        }%0A%0A      + ephemeral_storage (known after apply)%0A%0A      + logging_config (known after apply)%0A%0A      + tracing_config {%0A          + mode = "Active"%0A        }%0A    }%0A%0A  # aws_lambda_permission.allow_s3 will be created%0A  + resource "aws_lambda_permission" "allow_s3" {%0A      + action              = "lambda:InvokeFunction"%0A      + function_name       = "image-processor-lambda-5fa87b33107891e9"%0A      + id                  = (known after apply)%0A      + principal           = "s3.amazonaws.com"%0A      + source_account      = "154767946691"%0A      + source_arn          = "arn:aws:s3:::image-upload-source-bucket-5fa87b33107891e9"%0A      + statement_id        = "AllowS3Invocation"%0A      + statement_id_prefix = (known after apply)%0A    }%0A%0A  # aws_s3_bucket_notification.image_upload_trigger will be created%0A  + resource "aws_s3_bucket_notification" "image_upload_trigger" {%0A      + bucket      = "image-upload-source-bucket-5fa87b33107891e9"%0A      + eventbridge = false%0A      + id          = (known after apply)%0A%0A      + lambda_function {%0A          + events              = [%0A              + "s3:ObjectCreated:*",%0A            ]%0A          + filter_prefix       = "uploads/"%0A          + id                  = (known after apply)%0A          + lambda_function_arn = (known after apply)%0A        }%0A    }%0A%0APlan: 3 to add, 0 to change, 0 to destroy.%0A%0A─────────────────────────────────────────────────────────────────────────────%0A%0ANote: You didn't use the -out option to save this plan, so Terraform can't%0Aguarantee to take exactly these actions if you run "terraform apply" now.%0A
::debug::stderr: 
::debug::exitcode: 0
